
# JR0driguezB

# Simple script to decode NetWire RAT encoded strings
# Tested with sample fe53a72b7153804b22dc7a805f21db4f
# Unpacked to payload f350f56eafbafa294a6ed87791838ee4

total_decoding_counter = 0
success_decoding_counter = 0

not_a_key = "_BqwHaF8TkKDMfOzQASx4VuXdZibUIeylJWhj0m5o2ErLt6vGRN9sY1n3Ppc7g-C"

# Decoding function -> 0x38E5B60E

for xRef in XrefsTo(0x38E5B60E, flags=0):

	print "Call to decode string at offset {:02X}".format(xRef.frm)

	PrevInstr = idc.PrevHead(xRef.frm)
	if (GetMnem(PrevInstr) == "mov" and GetOperandValue(PrevInstr, 1) != 0):
		offset = GetOperandValue(PrevInstr, 1)
		success_decoding_counter = success_decoding_counter + 1

		encoded_string = ""

		while GetManyBytes(offset, 1) != "\x00":
			encoded_string += GetManyBytes(offset, 1)
			offset = offset + 0x01

		print "Encoded string: {}".format(encoded_string)

		decoded_string = ""

		for a in range(len(encoded_string)):

			found = False

			for b in range(len(not_a_key)):
				if encoded_string[a] == not_a_key[b]:
					decoded_string += not_a_key[(b + 6) % 64]
					found = True
			if (found == False):
				decoded_string += encoded_string[a]

		print "Decoded string: {}".format(decoded_string)

		MakeComm(PrevInstr, decoded_string)

		print "------------------------------"


	total_decoding_counter = total_decoding_counter + 1

print "------------------------------"
print "Total decoding calls: {}".format(total_decoding_counter)
print "Successful decoding calls: {}".format(success_decoding_counter)
