
# JR0driguezB

# Simple script to decrypt NetWire RAT encrypted strings
# Tested with sample fe53a72b7153804b22dc7a805f21db4f
# Unpacked to payload f350f56eafbafa294a6ed87791838ee4

def KSA_Phase(key):

	S = range(256)
	j = 0
	for i in range(256):
		j = (j + S[i] + ord( key[i % len(key)] )) % 256
		S[i] , S[j] = S[j] , S[i]
	return S

def PRGA_Phase(data, S):
	i = j = 0
	out = []
	for char in data:
	    i = ( i + 1 ) % 256
	    j = ( j + S[i] ) % 256
	    S[i] , S[j] = S[j] , S[i]
	    out.append(chr(ord(char) ^ S[(S[i] + S[j]) % 256]))

	decrypted_string = ''.join(out)

	return decrypted_string

def main():

	total_decryption_counter = 0

	# The first call to KSA Phase routine initializes the S Box with RC4 key at offset 0x38E6E604
	RC4_Key = GetManyBytes(0x38E6E604, 0x10)
	S_Box = KSA_Phase(RC4_Key)

	# RC4 PRGA Phase function -> 0x38E668AD

	for xRef in XrefsTo(0x38E668AD, flags=0):

		print "Call to decrypt string at offset {:02X}".format(xRef.frm)

		PrevInstr = idc.PrevHead(xRef.frm)
		PrevInstr = idc.PrevHead(PrevInstr)
		PrevInstr = idc.PrevHead(PrevInstr)

		if (GetMnem(PrevInstr) == "mov"):
			offset = GetOperandValue(PrevInstr, 1)

			PrevInstr = idc.PrevHead(PrevInstr)
			size = GetOperandValue(PrevInstr, 1)

			encrypted_string = GetManyBytes(offset, size)

			print "Encrypted string at offset: {:02X}".format(offset)

			S_Box_Init = S_Box[:]

			decrypted_string = PRGA_Phase(encrypted_string, S_Box_Init)

			for String_xRef in XrefsTo(offset, flags=0):

				print "\x09xRef to string at offset {:02X}".format(String_xRef.frm)
				MakeComm(String_xRef.frm, decrypted_string)

			print "------------------------------"

		total_decryption_counter = total_decryption_counter + 1

	print "------------------------------"
	print "Total decryption calls: {}".format(total_decryption_counter)

if __name__ == '__main__':

	main()